#include <stdio.h>
#include <stdlib.h>

struct Element {
    int row;
    int col;
    int value;
};

struct SparseMatrix {
    int rows;
    int cols;
    int num_elements;
    struct Element *elements;
};

// Function to create a sparse matrix
struct SparseMatrix *createSparseMatrix(int rows, int cols, int num_elements) {
    struct SparseMatrix *matrix = (struct SparseMatrix *)malloc(sizeof(struct SparseMatrix));
    matrix->rows = rows;
    matrix->cols = cols;
    matrix->num_elements = num_elements;
    matrix->elements = (struct Element *)malloc(num_elements * sizeof(struct Element));
    return matrix;
}

// Function to add two sparse matrices
struct SparseMatrix *addSparseMatrices(struct SparseMatrix *matrix1, struct SparseMatrix *matrix2) {
    if (matrix1->rows != matrix2->rows || matrix1->cols != matrix2->cols) {
        printf("Matrices must have the same dimensions for addition.\n");
        return NULL;
    }

    struct SparseMatrix *result = createSparseMatrix(matrix1->rows, matrix1->cols, matrix1->num_elements + matrix2->num_elements);
    int i = 0, j = 0, k = 0;

    while (i < matrix1->num_elements && j < matrix2->num_elements) {
        if (matrix1->elements[i].row < matrix2->elements[j].row) {
            result->elements[k++] = matrix1->elements[i++];
        } else if (matrix1->elements[i].row > matrix2->elements[j].row) {
            result->elements[k++] = matrix2->elements[j++];
        } else {
            if (matrix1->elements[i].col < matrix2->elements[j].col) {
                result->elements[k++] = matrix1->elements[i++];
            } else {
                result->elements[k++] = matrix2->elements[j++];
            }
        }
    }

    while (i < matrix1->num_elements) {
        result->elements[k++] = matrix1->elements[i++];
    }

    while (j < matrix2->num_elements) {
        result->elements[k++] = matrix2->elements[j++];
    }

    result->num_elements = k;
    return result;
}

// Function to print a sparse matrix
void printSparseMatrix(struct SparseMatrix *matrix) {
    int i, j;
    for (i = 0; i < matrix->rows; i++) {
        for (j = 0; j < matrix->cols; j++) {
            printf("0 ");
        }
        printf("\n");
    }

    for (i = 0; i < matrix->num_elements; i++) {
        printf("(%d, %d, %d) ", matrix->elements[i].row, matrix->elements[i].col, matrix->elements[i].value);
    }
    printf("\n");
}

int main() {
    // Example usage
    struct SparseMatrix *matrix1 = createSparseMatrix(3, 3, 3);
    matrix1->elements[0] = (struct Element){0, 0, 1};
    matrix1->elements[1] = (struct Element){1, 1, 2};
    matrix1->elements[2] = (struct Element){2, 2, 3};

    struct SparseMatrix *matrix2 = createSparseMatrix(3, 3, 2);
    matrix2->elements[0] = (struct Element){0, 1, 4};
    matrix2->elements[1] = (struct Element){1, 2, 5};

    struct SparseMatrix *result = addSparseMatrices(matrix1, matrix2);
    printf("Resultant Matrix:\n");
    printSparseMatrix(result);

    return 0;
}
